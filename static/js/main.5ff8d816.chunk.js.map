{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","cardArray","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,EAZF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,GAAGC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MACpB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAG,+BAA0BJ,EAA1B,eAAwCK,IAAI,cADxD,IAEI,gCACI,6BAAKJ,IACL,4BAAIC,WCMLI,EAXE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACNC,EAAYD,EAAOE,KAAI,SAACC,EAAKC,GAC/B,OAAO,cAAC,EAAD,CAAyBX,GAAIO,EAAOI,GAAGX,GAAIC,KAAMM,EAAOI,GAAGV,KAAMC,MAAOK,EAAOI,GAAGT,OAAvEK,EAAOI,GAAGX,OAEhC,OACI,8BACIQ,KCEDI,EATG,SAAC,GAAiC,EAA/BC,YAAgC,IAApBC,EAAmB,EAAnBA,aAC7B,OACI,qBAAKX,UAAU,MAAf,SACI,uBAAOA,UAAU,2CAA2CY,KAAK,SACjEC,YAAY,gBAAiBC,SAAYH,OCItCI,EARA,SAACC,GACZ,OACI,sBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,cACKJ,EAAMK,SADX,QCkBOC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG7B,WACI,OAAIG,KAAKJ,MAAMC,SACH,mEAELG,KAAKX,MAAMK,a,GAhBEQ,aCiDbC,G,wDAzCX,aAAe,IAAD,8BACV,gBAeJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,SAhBzC,EAAKX,MAAQ,CACTnB,OAAQ,GACRM,YAAa,IAJP,E,qDASd,WAAqB,IAAD,OAChByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAExB,OAAQmC,S,oBAS3C,WAAU,IAAD,EAC2BZ,KAAKJ,MAA7BnB,EADH,EACGA,OAAQM,EADX,EACWA,YACV8B,EAAepC,EAAOqC,QAAO,SAAAC,GAC/B,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASlC,EAAYiC,kBAEzD,OAAQvC,EAAOyC,OAGf,sBAAK7C,UAAU,KAAf,UACI,oBAAIA,UAAU,SAAd,yBACA,cAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,eAAC,EAAD,eACI,eAAC,EAAD,eACI,cAAC,EAAD,CAAU3B,OAAQoC,IADtB,aANR,oBAAIxC,UAAU,QAAd,4B,GA5BU6B,c,MCAlBiB,IAASC,OACP,eAAC,IAAMC,WAAP,eACE,cAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.5ff8d816.chunk.js","sourcesContent":["import React from 'react'; // must import react when working with JSX\r\n\r\nconst Card = ({ id,name,email }) => { // pass props from Card object in index.js to function. The props have been destructured\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n            <img src={`https://robohash.org/${id}?200×200`} alt=\"Robot.png\" /> {/*add ?lenght×width after image url to specify size of image */}\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );  \r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n        const cardArray = robots.map((user,i) => {\r\n            return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n        });\r\n        return (\r\n            <div>\r\n               {cardArray}\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default CardList;\r\n\r\n// Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity. Keys should have unique values","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField,searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa2 mb3 ba b--green bw2 bg-lightest-blue\" type=\"search\" \r\n            placeholder=\"Search Robots\"  onChange = {searchChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'; \r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '2px solid black', height: '800px'}}> {/* Use double curly brackets to add styling to components */}\r\n            {props.children} {/* used to display whatever you include between the opening and closing tags when invoking a component */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll; // Used to create a custom component in App.js","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) { // executes if an error did occur\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return  <h1>SOMETHING WENT WRONG... TRY AGAIN</h1>\r\n        }\r\n        return this.props.children; // return children components if nothing went wrong\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList.js';\r\nimport SearchBox from '../Components/SearchBox.js';\r\nimport Scroll from '../Components/Scroll.js';\r\nimport ErrorBoundary from '../Components/ErrorBoundary.js';\r\nimport './App.css'\r\n\r\n//  The State of a component is an object that holds some information that may change over the lifetime of the component.\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    // Invokes when constructor() and render() are done running. Renders again after componentDidMount()\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users') // fetch resource accross servers\r\n        .then(response => response.json())\r\n        .then(users => this.setState({ robots: users}));\r\n    }\r\n\r\n    // Search method\r\n    onSearchChange = (event) => { // NB! Use arrow functions when a method is not part of React\r\n        // event.target.value: returns value typed in search box (component)\r\n        this.setState({searchField: event.target.value}); // always invoke this when you want to change state\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchField } = this.state;\r\n        const filterRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase()); // check if search value exists in robots array. Works for upper and lowercase searches\r\n        });\r\n        return !robots.length ?\r\n        <h1 className=\"tc f1\">LOADING...</h1> :\r\n        // remember to always return one component\r\n        <div className=\"tc\">\r\n            <h1 className=\"mb3 f1\">Robofriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll> {/* CardList is a child of Scroll */}\r\n                <ErrorBoundary> {/* if anything in CardList fails, an error will be displayed */}\r\n                    <CardList robots={filterRobots}/> {/* state can be passed down as props to children */}\r\n                </ErrorBoundary>\r\n            </Scroll>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default App;","// React uses webpack under the hood, that's why you can use import\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css'; // you can import css files in React apps\r\nimport App from './Containers/App.js';\r\nimport 'tachyons' // react styling\r\n\r\n// The ReactDOM.render() function takes two arguments, HTML code and an HTML element.\r\n// The purpose of the function is to display the specified HTML code inside the specified HTML element.\r\nReactDOM.render(\r\n  <React.StrictMode> {/* helps find potential errors */}\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}